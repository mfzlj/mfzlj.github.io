WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.690
Now let's use our model to make some predictions.

00:00:03.690 --> 00:00:05.580
To make predictions with our model,

00:00:05.580 --> 00:00:08.085
we're going to use the predict method.

00:00:08.085 --> 00:00:11.640
This method will take our images pass them through

00:00:11.640 --> 00:00:15.330
our network and return its output in a NumPy array.

00:00:15.330 --> 00:00:19.905
Let's plot our models predicted probabilities for a single image,

00:00:19.905 --> 00:00:21.570
in our training set.

00:00:21.570 --> 00:00:25.335
We begin by taking a single batch of images,

00:00:25.335 --> 00:00:27.090
as we've done before.

00:00:27.090 --> 00:00:33.165
Then we use our model to make predictions on this batch of images.

00:00:33.165 --> 00:00:35.790
The predict method will return

00:00:35.790 --> 00:00:40.410
a NumPy array that we're going to save in a variable called ps.

00:00:40.410 --> 00:00:47.720
In this case, ps will contain the predicted probabilities for each image in the batch.

00:00:47.720 --> 00:00:53.960
Since we have 64 images per batch and we have 10 possible classes,

00:00:53.960 --> 00:00:59.005
ps will be an array of size 64 by 10.

00:00:59.005 --> 00:01:02.255
After we have our predicted probabilities,

00:01:02.255 --> 00:01:06.310
we're going to grab the first image in our batch as we've seen before.

00:01:06.310 --> 00:01:10.340
Next, we use Matplotlib to plot

00:01:10.340 --> 00:01:15.895
the first image in our batch alongside its corresponding predicted probabilities.

00:01:15.895 --> 00:01:20.090
Remember that ps is an array that has

00:01:20.090 --> 00:01:24.995
the predicted probabilities for all of the 64 images in our batch.

00:01:24.995 --> 00:01:28.520
Therefore, we must set the index equal to

00:01:28.520 --> 00:01:33.395
zero to only select the predicted probabilities for the first image.

00:01:33.395 --> 00:01:37.850
If we look at the predicted probabilities for a first image,

00:01:37.850 --> 00:01:43.400
we can see that our network basically has no idea what digit is in the image.

00:01:43.400 --> 00:01:46.825
This is because we haven't trained our model yet,

00:01:46.825 --> 00:01:50.900
it hasn't learned to recognize the digits that are in the images.

00:01:50.900 --> 00:01:54.365
All it has right now is random weights and biases.

00:01:54.365 --> 00:02:00.090
The best we can do is make random guesses at what digit appears in the image.

