WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.820
Finally, it's time to train our model.

00:00:02.820 --> 00:00:04.035
To train our models,

00:00:04.035 --> 00:00:06.070
we use the fit method.

00:00:06.070 --> 00:00:08.430
The first argument in the fit method

00:00:08.430 --> 00:00:11.670
is the data that we're going to use to train our model.

00:00:11.670 --> 00:00:16.335
Here, we're using the training batches we created using our pipeline.

00:00:16.335 --> 00:00:19.350
The second argument is the number of epochs.

00:00:19.350 --> 00:00:23.520
An epoch refers to one pass through the entire data set.

00:00:23.520 --> 00:00:28.185
So here, we've chosen to train our model for five epochs.

00:00:28.185 --> 00:00:33.510
So we're going to pass through the entire data set five times before we stop training.

00:00:33.510 --> 00:00:37.500
The fit method also returns a history object.

00:00:37.500 --> 00:00:40.310
This history object contains a record of

00:00:40.310 --> 00:00:44.375
training accuracy and loss values at successive epochs,

00:00:44.375 --> 00:00:48.545
as well as validation accuracy and loss values when applicable.

00:00:48.545 --> 00:00:51.955
We will discuss the history object in a later lesson.

00:00:51.955 --> 00:00:53.685
If we run this cell,

00:00:53.685 --> 00:00:58.865
we can see the current epoch and the current batch as the model is training.

00:00:58.865 --> 00:01:04.265
We can also see how long it takes to go through each epoch as well

00:01:04.265 --> 00:01:10.115
as the loss value and the accuracy value at the end of each epoch.

00:01:10.115 --> 00:01:12.875
We can see that by the end of training,

00:01:12.875 --> 00:01:17.725
the loss value is 0.0456,

00:01:17.725 --> 00:01:23.735
and that the accuracy is about 98.7 percent, which is pretty good.

00:01:23.735 --> 00:01:25.985
Now that our model is trained,

00:01:25.985 --> 00:01:30.755
let's use it to make predictions on a single image just as we've done before.

00:01:30.755 --> 00:01:32.270
If we run this cell,

00:01:32.270 --> 00:01:35.015
we can see that our model is now brilliant.

00:01:35.015 --> 00:01:38.950
It has predicted, with great probability,

00:01:38.950 --> 00:01:42.740
that the digit in this image is an eight,

00:01:42.740 --> 00:01:45.055
which is absolutely correct.

00:01:45.055 --> 00:01:49.850
Now, let's take a quick look at the loss and accuracy values that we

00:01:49.850 --> 00:01:54.655
get when we pass a single batch of images to our trained model.

00:01:54.655 --> 00:01:58.430
As we can see, we get a loss value of about

00:01:58.430 --> 00:02:05.770
0.02 and we get an accuracy of about 98.4 percent.

00:02:05.770 --> 00:02:11.495
If we compare these values to the ones we got before when our model was untrained,

00:02:11.495 --> 00:02:14.585
we can see that we've made a huge improvement.

00:02:14.585 --> 00:02:17.930
Now is your turn to create a model,

00:02:17.930 --> 00:02:21.260
train it, and use it to make predictions.

00:02:21.260 --> 00:02:25.530
In this exercise, you're going to create a model, in this exercise,

00:02:25.530 --> 00:02:27.075
you're going to train your model,

00:02:27.075 --> 00:02:28.640
and in this exercise,

00:02:28.640 --> 00:02:31.505
you're going to use it to make predictions.

00:02:31.505 --> 00:02:35.150
This is a good time to pause the video and try out

00:02:35.150 --> 00:02:40.260
these exercises for yourself before I show you my solutions.

00:02:41.800 --> 00:02:45.710
Here is my solution to this exercise.

00:02:45.710 --> 00:02:48.845
As you can see, I've created a sequential model

00:02:48.845 --> 00:02:53.215
and then I've compiled my model to get it ready for training.

00:02:53.215 --> 00:02:57.095
Here is my solution to the second exercise.

00:02:57.095 --> 00:03:00.130
Here I've set the number of epochs to five

00:03:00.130 --> 00:03:03.955
and then I used the fit method to train my model.

00:03:03.955 --> 00:03:07.500
Here is my solution to the third exercise.

00:03:07.500 --> 00:03:11.165
As always, we begin by taking a single batch of images

00:03:11.165 --> 00:03:15.325
and then making predictions with the predict method on that batch of images,

00:03:15.325 --> 00:03:17.760
and then we take the first image in the batch,

00:03:17.760 --> 00:03:23.790
and then we use mybooklib to plot it alongside the class probability.

